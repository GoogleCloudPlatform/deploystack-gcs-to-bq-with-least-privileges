# DON'T REMOVE FROM test script.
CYAN='\033[0;36m'
BCYAN='\033[1;36m'
NC='\033[0m' # No Color
DIVIDER=$(printf %"$(tput cols)"s | tr " " "*")
DIVIDER+="\n"

function get_project_id() {
    local __resultvar=$1
    VALUE=$(gcloud config get-value project | xargs)
    eval $__resultvar="'$VALUE'"
}

function get_project_number() {
    local __resultvar=$1
    local PRO=$2
    VALUE=$(gcloud projects list --filter="project_id=$PRO" --format="value(PROJECT_NUMBER)" | xargs)
    eval $__resultvar="'$VALUE'"
}

# DISPLAY HELPERS
function section_open() {
    section_description=$1
    printf "$DIVIDER"
    printf "${CYAN}$section_description${NC} \n"
    printf "$DIVIDER"
}

function section_close() {
    printf "$DIVIDER"
    printf "${CYAN}$section_description ${BCYAN}- done${NC}\n"
    printf "\n\n"
}

function evalTest() {
    local command=$1
    local expected=$2

    local ERR=""
    got=$(eval $command 2>errFile)
    ERR=$(<errFile)

    if [ ${#ERR} -gt 0 ]; then
        if [ "$expected" = "EXPECTERROR" ]; then
            printf "Expected Error thrown \n"
            return
        fi

        printf "Halting - error: '$ERR'  \n"
        exit 1
    fi

    if [ "$got" != "$expected" ]; then
        printf "Halting: '$got' expected '$expected'  \n"
        exit 1
    fi

    printf "$expected is ok\n"
}
# END DON'T REMOVE FROM test script.

get_project_id PROJECT
get_project_number PROJECT_NUMBER $PROJECT
# TODO: Script is pretty rudimentary, so make sure all of these variables are actually needed for test
PREFIX=[SET VALUE HERE]
PROJECT_ID=[SET VALUE HERE]
 

gcloud config set project ${PROJECT}

terraform init
# TODO: Make sure all of these variables are correct and actually need to be passed in.:
terraform apply  \
   -var prefix=$PREFIX \
   -var project_id=$PROJECT_ID \
   -auto-approve


section_open "Test github.com/GoogleCloudPlatform/cloud-foundation-fabric//modules/gcs?ref=v18.0.0 exists"
    evalTest 'gsutil ls | grep -c gs://data' "0"
section_close

section_open "Test github.com/GoogleCloudPlatform/cloud-foundation-fabric//modules/kms?ref=v18.0.0 exists"
    #TODO: This may or may not work haven't been able to test with kms too much
    evalTest 'gcloud kms keyrings describe ${var.prefix}-keyring --format="value(name)"' ""
section_close

section_open "Test github.com/GoogleCloudPlatform/cloud-foundation-fabric//modules/iam-service-account?ref=v18.0.0 exists"
    #TODO: This should be an email and not just an account, so add the @domain.com bit
    evalTest 'gcloud iam service-accounts describe  --format="value(email)"' ""
section_close

section_open "Test github.com/GoogleCloudPlatform/cloud-foundation-fabric//modules/iam-service-account?ref=v18.0.0 exists"
    #TODO: This should be an email and not just an account, so add the @domain.com bit
    evalTest 'gcloud iam service-accounts describe  --format="value(email)"' ""
section_close

section_open "Test github.com/GoogleCloudPlatform/cloud-foundation-fabric//modules/gcs?ref=v18.0.0 exists"
    evalTest 'gsutil ls | grep -c gs://df-tmp' "0"
section_close

section_open "Test github.com/GoogleCloudPlatform/cloud-foundation-fabric//modules/iam-service-account?ref=v18.0.0 exists"
    #TODO: This should be an email and not just an account, so add the @domain.com bit
    evalTest 'gcloud iam service-accounts describe  --format="value(email)"' ""
section_close

section_open "Test github.com/GoogleCloudPlatform/cloud-foundation-fabric//modules/net-vpc-firewall?ref=v18.0.0 exists"
    evalTest 'gcloud compute firewalls describe  --zone $ZONE --format="value(name)"' ""
section_close

section_open "Test github.com/GoogleCloudPlatform/cloud-foundation-fabric//modules/iam-service-account?ref=v18.0.0 exists"
    #TODO: This should be an email and not just an account, so add the @domain.com bit
    evalTest 'gcloud iam service-accounts describe  --format="value(email)"' ""
section_close

section_open "Test github.com/GoogleCloudPlatform/cloud-foundation-fabric//modules/bigquery-dataset?ref=v18.0.0 exists"
    #TODO: Double check this set of options for test
    evalTest 'bq ls | grep -c' "1"
section_close

section_open "Test github.com/GoogleCloudPlatform/cloud-foundation-fabric//modules/net-cloudnat?ref=v18.0.0 exists"
    #TODO: This may or may not work, review please
    evalTest 'gcloud compute routers describe ${var.prefix}-default --region $REGION --format="value(name)"' ""
section_close

section_open "Test github.com/GoogleCloudPlatform/cloud-foundation-fabric//modules/project?ref=v18.0.0 exists"
    evalTest 'gcloud projects describe var.project_id --format="value(name)"' ""
section_close


# TODO: Make sure all of these variables are correct and actually need to be passed in.:
terraform destroy  \
   -var cmek_encryption=$CMEK_ENCRYPTION \
   -var data_eng_principals=$DATA_ENG_PRINCIPALS \
   -var network_config=$NETWORK_CONFIG \
   -var prefix=$PREFIX \
   -var project_create=$PROJECT_CREATE \
   -var project_id=$PROJECT_ID \
   -var region=$REGION \
   -var vpc_subnet_range=$VPC_SUBNET_RANGE \
   -auto-approve


section_open "Test github.com/GoogleCloudPlatform/cloud-foundation-fabric//modules/gcs?ref=v18.0.0 does not exists"
    evalTest 'gsutil ls | grep -c gs://data' "EXPECTERROR"
section_close

section_open "Test github.com/GoogleCloudPlatform/cloud-foundation-fabric//modules/kms?ref=v18.0.0 does not exists"
    #TODO: This may or may not work haven't been able to test with kms too much
    evalTest 'gcloud kms keyrings describe ${var.prefix}-keyring --format="value(name)"' "EXPECTERROR"
section_close

section_open "Test github.com/GoogleCloudPlatform/cloud-foundation-fabric//modules/iam-service-account?ref=v18.0.0 does not exists"
    #TODO: This should be an email and not just an account, so add the @domain.com bit
    evalTest 'gcloud iam service-accounts describe  --format="value(email)"' "EXPECTERROR"
section_close

section_open "Test github.com/GoogleCloudPlatform/cloud-foundation-fabric//modules/iam-service-account?ref=v18.0.0 does not exists"
    #TODO: This should be an email and not just an account, so add the @domain.com bit
    evalTest 'gcloud iam service-accounts describe  --format="value(email)"' "EXPECTERROR"
section_close

section_open "Test github.com/GoogleCloudPlatform/cloud-foundation-fabric//modules/gcs?ref=v18.0.0 does not exists"
    evalTest 'gsutil ls | grep -c gs://df-tmp' "EXPECTERROR"
section_close

section_open "Test github.com/GoogleCloudPlatform/cloud-foundation-fabric//modules/iam-service-account?ref=v18.0.0 does not exists"
    #TODO: This should be an email and not just an account, so add the @domain.com bit
    evalTest 'gcloud iam service-accounts describe  --format="value(email)"' "EXPECTERROR"
section_close

section_open "Test github.com/GoogleCloudPlatform/cloud-foundation-fabric//modules/net-vpc-firewall?ref=v18.0.0 does not exists"
    evalTest 'gcloud compute firewalls describe  --zone $ZONE --format="value(name)"' "EXPECTERROR"
section_close

section_open "Test github.com/GoogleCloudPlatform/cloud-foundation-fabric//modules/iam-service-account?ref=v18.0.0 does not exists"
    #TODO: This should be an email and not just an account, so add the @domain.com bit
    evalTest 'gcloud iam service-accounts describe  --format="value(email)"' "EXPECTERROR"
section_close

section_open "Test github.com/GoogleCloudPlatform/cloud-foundation-fabric//modules/bigquery-dataset?ref=v18.0.0 does not exists"
    #TODO: Double check this set of options for test
    evalTest 'bq ls | grep -c' "EXPECTERROR"
section_close

section_open "Test github.com/GoogleCloudPlatform/cloud-foundation-fabric//modules/net-cloudnat?ref=v18.0.0 does not exists"
    #TODO: This may or may not work, review please
    evalTest 'gcloud compute routers describe ${var.prefix}-default --region $REGION --format="value(name)"' "EXPECTERROR"
section_close

section_open "Test github.com/GoogleCloudPlatform/cloud-foundation-fabric//modules/project?ref=v18.0.0 does not exists"
    evalTest 'gcloud projects describe var.project_id --format="value(name)"' "EXPECTERROR"
section_close


printf "$DIVIDER"
printf "CONGRATS!!!!!!! \n"
printf "You got the end the of your test with everything working. \n"
printf "$DIVIDER"