# DON'T REMOVE FROM test script.
CYAN='\033[0;36m'
BCYAN='\033[1;36m'
NC='\033[0m' # No Color
DIVIDER=$(printf %"$(tput cols)"s | tr " " "*")
DIVIDER+="\n"

function get_project_id() {
    local __resultvar=$1
    VALUE=$(gcloud config get-value project | xargs)
    eval $__resultvar="'$VALUE'"
}

function get_project_number() {
    local __resultvar=$1
    local PRO=$2
    VALUE=$(gcloud projects list --filter="project_id=$PRO" --format="value(PROJECT_NUMBER)" | xargs)
    eval $__resultvar="'$VALUE'"
}

# DISPLAY HELPERS
function section_open() {
    section_description=$1
    printf "$DIVIDER"
    printf "${CYAN}$section_description${NC} \n"
    printf "$DIVIDER"
}

function section_close() {
    printf "$DIVIDER"
    printf "${CYAN}$section_description ${BCYAN}- done${NC}\n"
    printf "\n\n"
}

function evalTest() {
    local command=$1
    local expected=$2

    local ERR=""
    got=$(eval $command 2>errFile)
    ERR=$(<errFile)

    if [ ${#ERR} -gt 0 ]; then
        if [ "$expected" = "EXPECTERROR" ]; then
            printf "Expected Error thrown \n"
            return
        fi

        printf "Halting - error: '$ERR'  \n"
        exit 1
    fi

    if [ "$got" != "$expected" ]; then
        printf "Halting: '$got' expected '$expected'  \n"
        exit 1
    fi

    printf "$expected is ok\n"
}
# END DON'T REMOVE FROM test script.

get_project_id PROJECT
get_project_number PROJECT_NUMBER $PROJECT
# TODO: Script is pretty rudimentary, so make sure all of these variables are actually needed for test
PREFIX=deploystack-test
PROJECT_ID=$PROJECT
REGION=europe-west1
CMEK_ENCRYPTION=true

gcloud config set project ${PROJECT}

terraform init
# TODO: Make sure all of these variables are correct and actually need to be passed in.:
terraform apply \
   -var prefix=$PREFIX \
   -var project_id=$PROJECT_ID \
   -var region=$REGION \
   -auto-approve

section_open "Test github.com/GoogleCloudPlatform/cloud-foundation-fabric//modules/iam-service-account?ref=v19.0.0 exists"
    evalTest 'gcloud iam service-accounts describe orchestrator@${PROJECT}.iam.gserviceaccount.com --format="value(email)"' "orchestrator@${PROJECT}.iam.gserviceaccount.com"
    evalTest 'gcloud iam service-accounts describe bq-datalake@${PROJECT}.iam.gserviceaccount.com --format="value(email)"' "bq-datalake@${PROJECT}.iam.gserviceaccount.com"
    evalTest 'gcloud iam service-accounts describe df-loading@${PROJECT}.iam.gserviceaccount.com --format="value(email)"' "df-loading@${PROJECT}.iam.gserviceaccount.com"
    evalTest 'gcloud iam service-accounts describe gcs-landing@${PROJECT}.iam.gserviceaccount.com --format="value(email)"' "gcs-landing@${PROJECT}.iam.gserviceaccount.com"
section_close

section_open "Test github.com/GoogleCloudPlatform/cloud-foundation-fabric//modules/gcs?ref=v19.0.0 exists"
    evalTest 'gsutil ls | grep -c gs://data' "0"
    evalTest 'gsutil ls | grep -c gs://df-tmp' "0"
section_close

section_open "Test github.com/GoogleCloudPlatform/cloud-foundation-fabric//modules/net-vpc-firewall?ref=v19.0.0 exists"
    evalTest 'gcloud compute firewall-rules describe ${PREFIX}-vpc-ingress-admins --format="value(name)"' "${PREFIX}-vpc-ingress-admins"
section_close

section_open "Test github.com/GoogleCloudPlatform/cloud-foundation-fabric//modules/bigquery-dataset?ref=v19.0.0 exists"
    evalTest 'bq ls | grep -c datalake' "1"
section_close

section_open "Test github.com/GoogleCloudPlatform/cloud-foundation-fabric//modules/net-cloudnat?ref=v19.0.0 exists"
    evalTest 'gcloud compute routers describe ${PREFIX}-default-nat --region $REGION --format="value(name)"' "${PREFIX}-default-nat"
section_close

section_open "Test github.com/GoogleCloudPlatform/cloud-foundation-fabric//modules/project?ref=v19.0.0 exists"
    evalTest 'gcloud projects describe ${PROJECT_ID} --format="value(name)"' "${PROJECT}"
section_close


# TODO: Make sure all of these variables are correct and actually need to be passed in.:
terraform destroy \
   -var prefix=$PREFIX \
   -var project_id=$PROJECT_ID \
   -var region=$REGION \
   -auto-approve

section_open "Test github.com/GoogleCloudPlatform/cloud-foundation-fabric//modules/iam-service-account?ref=v19.0.0 does not exists"
    evalTest 'gcloud iam service-accounts describe orchestrator@${PROJECT}.iam.gserviceaccount.com --format="value(email)"' "EXPECTERROR"
    evalTest 'gcloud iam service-accounts describe bq-datalake@${PROJECT}.iam.gserviceaccount.com --format="value(email)"' "EXPECTERROR"
    evalTest 'gcloud iam service-accounts describe df-loading@${PROJECT}.iam.gserviceaccount.com --format="value(email)"' "EXPECTERROR"
    evalTest 'gcloud iam service-accounts describe gcs-landing@${PROJECT}.iam.gserviceaccount.com --format="value(email)"' "EXPECTERROR"
section_close

section_open "Test github.com/GoogleCloudPlatform/cloud-foundation-fabric//modules/gcs?ref=v19.0.0 does not exists"
    evalTest 'gsutil ls | grep -c gs://data' "0"
    evalTest 'gsutil ls | grep -c gs://df-tmp' "0"
section_close

section_open "Test github.com/GoogleCloudPlatform/cloud-foundation-fabric//modules/net-vpc-firewall?ref=v19.0.0 does not exists"
    evalTest 'gcloud compute firewall-rules describe ${PREFIX}-vpc-ingress-admins --format="value(name)"' "EXPECTERROR"
section_close

section_open "Test github.com/GoogleCloudPlatform/cloud-foundation-fabric//modules/bigquery-dataset?ref=v19.0.0 does not exists"
    evalTest 'bq ls | grep -c datalake' "0"
section_close

section_open "Test github.com/GoogleCloudPlatform/cloud-foundation-fabric//modules/net-cloudnat?ref=v19.0.0 does not exists"
    evalTest 'gcloud compute routers describe ${PREFIX}-default-nat --region $REGION --format="value(name)"' "EXPECTERROR"
section_close

printf "$DIVIDER"
printf "CONGRATS!!!!!!! \n"
printf "You got the end the of your test with everything working. \n"
printf "$DIVIDER"
